from math import *


def jacob(X, T):
    T[0][0] = -sin(X[0][0] * X[1][0]) * X[1][0]
    T[0][1] = -sin(X[0][0] * X[1][0]) * X[0][0]
    T[0][2] = 3. * exp(- (3 * X[2][0]))
    T[0][3] = X[4][0] * X[4][0]
    T[0][4] = 2 * X[3][0] * X[4][0]
    T[0][5] = -1
    T[0][6] = 0
    T[0][7] = -2. * cosh((2 * X[7][0])) * X[8][0]
    T[0][8] = -sinh((2 * X[7][0]))
    T[0][9] = 2
    T[1][0] = cos(X[0][0] * X[1][0]) * X[1][0]
    T[1][1] = cos(X[0][0] * X[1][0]) * X[0][0]
    T[1][2] = X[8][0] * X[6][0]
    T[1][3] = 0
    T[1][4] = 6 * X[4][0]
    T[1][5] = -exp(-X[9][0] + X[5][0]) - X[7][0] - 0.1e1
    T[1][6] = X[2][0] * X[8][0]
    T[1][7] = -X[5][0]
    T[1][8] = X[2][0] * X[6][0]
    T[1][9] = exp(-X[9][0] + X[5][0])
    T[2][0] = 1
    T[2][1] = -1
    T[2][2] = 1
    T[2][3] = -1
    T[2][4] = 1
    T[2][5] = -1
    T[2][6] = 1
    T[2][7] = -1
    T[2][8] = 1
    T[2][9] = -1
    T[3][0] = - X[4][0] * pow(X[2][0] + X[0][0], -2.)
    T[3][1] = -2. * cos(X[1][0] * X[1][0]) * X[1][0]
    T[3][2] = - X[4][0] * pow(X[2][0] + X[0][0], -2.)
    T[3][3] = -2. * sin(-X[8][0] + X[3][0])
    T[3][4] = 1. / (X[2][0] + X[0][0])
    T[3][5] = 0
    T[3][6] = -2. * cos(X[6][0] * X[9][0]) * sin(X[6][0] * X[9][0]) * X[9][0]
    T[3][7] = -1
    T[3][8] = 2. * sin(-X[8][0] + X[3][0])
    T[3][9] = -2. * cos(X[6][0] * X[9][0]) * sin(X[6][0] * X[9][0]) * X[6][0]
    T[4][0] = 2 * X[7][0]
    T[4][1] = -2. * sin(X[1][0])
    T[4][2] = 2 * X[7][0]
    T[4][3] = pow(-X[8][0] + X[3][0], -2.)
    T[4][4] = cos(X[4][0])
    T[4][5] = X[6][0] * exp(-X[6][0] * (-X[9][0] + X[5][0]))
    T[4][6] = -(X[9][0] - X[5][0]) * exp(-X[6][0] * (-X[9][0] + X[5][0]))
    T[4][7] = (2 * X[2][0]) + 2. * X[0][0]
    T[4][8] = -pow(-X[8][0] + X[3][0], -2.)
    T[4][9] = -X[6][0] * exp(-X[6][0] * (-X[9][0] + X[5][0]))
    T[5][0] = exp(X[0][0] - X[3][0] - X[8][0])
    T[5][1] = -3. / 2. * sin(3. * X[9][0] * X[1][0]) * X[9][0]
    T[5][2] = -X[5][0]
    T[5][3] = -exp(X[0][0] - X[3][0] - X[8][0])
    T[5][4] = 2 * X[4][0] / X[7][0]
    T[5][5] = -X[2][0]
    T[5][6] = 0
    T[5][7] = -X[4][0] * X[4][0] * pow(X[7][0], (-2))
    T[5][8] = -exp(X[0][0] - X[3][0] - X[8][0])
    T[5][9] = -3. / 2. * sin(3. * X[9][0] * X[1][0]) * X[1][0]
    T[6][0] = cos(X[3][0])
    T[6][1] = 3. * X[1][0] * X[1][0] * X[6][0]
    T[6][2] = 1
    T[6][3] = -(X[0][0] - X[5][0]) * sin(X[3][0])
    T[6][4] = cos(X[9][0] / X[4][0] + X[7][0]) * X[9][0] * pow(X[4][0], (-2))
    T[6][5] = -cos(X[3][0])
    T[6][6] = pow(X[1][0], 3.)
    T[6][7] = -cos(X[9][0] / X[4][0] + X[7][0])
    T[6][8] = 0
    T[6][9] = -cos(X[9][0] / X[4][0] + X[7][0]) / X[4][0]
    T[7][0] = 2. * X[4][0] * (X[0][0] - 2. * X[5][0])
    T[7][1] = -X[6][0] * exp(X[1][0] * X[6][0] + X[9][0])
    T[7][2] = -2. * cos(-X[8][0] + X[2][0])
    T[7][3] = 0.15e1
    T[7][4] = pow(X[0][0] - 2. * X[5][0], 2.)
    T[7][5] = -4. * X[4][0] * (X[0][0] - 2. * X[5][0])
    T[7][6] = -X[1][0] * exp(X[1][0] * X[6][0] + X[9][0])
    T[7][7] = 0
    T[7][8] = 2. * cos(-X[8][0] + X[2][0])
    T[7][9] = -exp(X[1][0] * X[6][0] + X[9][0])
    T[8][0] = -3
    T[8][1] = -2. * X[7][0] * X[9][0] * X[6][0]
    T[8][2] = 0
    T[8][3] = exp((X[4][0] + X[3][0]))
    T[8][4] = exp((X[4][0] + X[3][0]))
    T[8][5] = -0.7e1 * pow(X[5][0], -2.)
    T[8][6] = -2. * X[1][0] * X[7][0] * X[9][0]
    T[8][7] = -2. * X[1][0] * X[9][0] * X[6][0]
    T[8][8] = 3
    T[8][9] = -2. * X[1][0] * X[7][0] * X[6][0]
    T[9][0] = X[9][0]
    T[9][1] = X[8][0]
    T[9][2] = -X[7][0]
    T[9][3] = cos(X[3][0] + X[4][0] + X[5][0]) * X[6][0]
    T[9][4] = cos(X[3][0] + X[4][0] + X[5][0]) * X[6][0]
    T[9][5] = cos(X[3][0] + X[4][0] + X[5][0]) * X[6][0]
    T[9][6] = sin(X[3][0] + X[4][0] + X[5][0])
    T[9][7] = -X[2][0]
    T[9][8] = X[1][0]
    T[9][9] = X[0][0]

    return T


def func(X):
    F = [[cos(X[0][0] * X[1][0]) - exp(-3 * X[2][0]) + X[3][0] * (X[4][0] ** 2) - X[5][0] - sinh(2 * X[7][0]) * X[8][
        0] + 2 * X[9][0] + 2.0004339741653854440],
         [sin(X[0][0] * X[1][0]) + X[2][0] * X[8][0] * X[6][0] - exp(-X[9][0] + X[5][0]) + 3 * X[4][0] ** 2 - X[5][
             0] * (
              X[7][0] + 1) + 10.886272036407019994],
         [X[0][0] - X[1][0] + X[2][0] - X[3][0] + X[4][0] - X[5][0] + X[6][0] - X[7][0] + X[8][0] - X[9][
             0] - 3.1361904761904761904],
         [2 * cos(-X[8][0] + X[3][0]) + X[4][0] / (X[2][0] + X[0][0]) - sin(X[1][0] ** 2) + (
             cos(X[6][0] * X[9][0])) ** 2 -
          X[7][0] - 0.1707472705022304757],
         [sin(X[4][0]) + 2 * X[7][0] * (X[2][0] + X[0][0]) - exp(-X[6][0] * (-X[9][0] + X[5][0])) + 2 * cos(
             X[1][0]) - 1 / (
              X[3][0] - X[8][0]) - 0.3685896273101277862],
         [exp(X[0][0] - X[3][0] - X[8][0]) + X[4][0] ** 2 / X[7][0] + 0.5 * cos(3 * X[9][0] * X[1][0]) - X[5][0] * X[2][
             0] + 2.0491086016771875115],
         [X[1][0] ** 3 * X[6][0] - sin(X[9][0] / X[4][0] + X[7][0]) + (X[0][0] - X[5][0]) * cos(X[3][0]) + X[2][
             0] - 0.7380430076202798014],
         [X[4][0] * (X[0][0] - 2 * X[5][0]) ** 2 - 2 * sin(-X[8][0] + X[2][0]) + 1.5 * X[3][0] - exp(
             X[1][0] * X[6][0] + X[9][0]) + 3.5668321989693809040],
         [7 / X[5][0] + exp(X[4][0] + X[3][0]) - 2 * X[1][0] * X[7][0] * X[9][0] * X[6][0] + 3 * X[8][0] - 3 * X[0][
             0] - 8.4394734508383257499],
         [X[9][0] * X[0][0] + X[8][0] * X[1][0] - X[7][0] * X[2][0] + sin(X[3][0] + X[4][0] + X[5][0]) * X[6][
             0] - 0.78238095238095238096]]

    return F
